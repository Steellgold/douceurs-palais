<div class="relative w-full {{ class }}">
  <form action="{{ path('app_search_results') }}" method="GET" class="relative">
    <input
        type="text"
        id="{{ id }}"
        name="{{ name }}"
        value="{{ value }}"
        placeholder="{{ placeholder }}"
        autocomplete="off"
        class="w-full px-5 py-4 pl-4 pr-12 text-md border border-gray-300 rounded-full shadow-lg focus:outline-none focus:ring-2 focus:ring-[#EDA239] focus:border-transparent"
    />
    <button type="submit" class="absolute right-2 top-1/2 transform -translate-y-1/2 bg-[#EDA239] text-white p-3 rounded-full hover:bg-[#EFAF7D] transition-colors">
      <i data-lucide="search" class="h-5 w-5"></i>
    </button>
  </form>

  <div id="{{ id }}-suggestions" class="absolute z-50 w-full mt-2 bg-white rounded-lg shadow-xl border border-gray-200 hidden max-h-60 overflow-y-auto">
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const input = document.getElementById('{{ id }}');
    const suggestionsContainer = document.getElementById('{{ id }}-suggestions');
    let currentFocus = -1;
    let debounceTimer;

    if (!input || !suggestionsContainer) return;

    input.addEventListener('input', function() {
      const value = this.value;
      clearTimeout(debounceTimer);

      if (value.length < 2) {
        suggestionsContainer.classList.add('hidden');
        return;
      }

      debounceTimer = setTimeout(() => {
        fetchSuggestions(value);
      }, 300);
    });

    async function fetchSuggestions(query) {
      try {
        const response = await fetch(`/search/api/cities?q=${encodeURIComponent(query)}`);
        const suggestions = await response.json();

        if (suggestions.length === 0) {
          suggestionsContainer.classList.add('hidden');
          return;
        }

        displaySuggestions(suggestions);
      } catch (error) {
        console.error('Erreur lors de la récupération des suggestions:', error);
        suggestionsContainer.classList.add('hidden');
      }
    }

    function displaySuggestions(suggestions) {
      suggestionsContainer.innerHTML = '';
      currentFocus = -1;

      suggestions.forEach((suggestion, index) => {
        const div = document.createElement('div');
        div.className = 'px-4 py-3 hover:bg-gray-100 cursor-pointer transition-colors';
        div.innerHTML = `
        <div class="font-semibold">${suggestion.city}</div>
        <div class="text-sm text-gray-600">${suggestion.postalCode}</div>
      `;

        div.addEventListener('click', function() {
          selectSuggestion(suggestion);
        });

        suggestionsContainer.appendChild(div);
      });

      suggestionsContainer.classList.remove('hidden');
    }

    function selectSuggestion(suggestion) {
      input.value = suggestion.value;

      const form = input.closest('form');

      const oldCity = form.querySelector('input[name="city"]');
      const oldPostalCode = form.querySelector('input[name="postalCode"]');
      if (oldCity) oldCity.remove();
      if (oldPostalCode) oldPostalCode.remove();

      const cityInput = document.createElement('input');
      cityInput.type = 'hidden';
      cityInput.name = 'city';
      cityInput.value = suggestion.city;
      form.appendChild(cityInput);

      const postalCodeInput = document.createElement('input');
      postalCodeInput.type = 'hidden';
      postalCodeInput.name = 'postalCode';
      postalCodeInput.value = suggestion.postalCode;
      form.appendChild(postalCodeInput);

      suggestionsContainer.classList.add('hidden');
    }

    input.addEventListener('keydown', function(e) {
      const items = suggestionsContainer.querySelectorAll('div');

      if (e.keyCode === 40) {
        e.preventDefault();
        currentFocus++;
        addActive(items);
      } else if (e.keyCode === 38) {
        e.preventDefault();
        currentFocus--;
        addActive(items);
      } else if (e.keyCode === 13) {
        if (currentFocus > -1 && items[currentFocus]) {
          e.preventDefault();
          items[currentFocus].click();
        }
      } else if (e.keyCode === 27) {
        suggestionsContainer.classList.add('hidden');
        currentFocus = -1;
      }
    });

    function addActive(items) {
      if (!items) return false;
      removeActive(items);
      if (currentFocus >= items.length) currentFocus = 0;
      if (currentFocus < 0) currentFocus = items.length - 1;
      items[currentFocus].classList.add('bg-gray-100');
    }

    function removeActive(items) {
      for (let i = 0; i < items.length; i++) {
        items[i].classList.remove('bg-gray-100');
      }
    }

    document.addEventListener('click', function(e) {
      if (!input.contains(e.target) && !suggestionsContainer.contains(e.target)) {
        suggestionsContainer.classList.add('hidden');
      }
    });
  });
</script>